/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example

fun main() {
    val a = 16.0
    val b = -3.0
    val c = 2.0

    if (a == 0.0) {
        println("El coeficiente 'a' no puede ser cero en una función cuadrática.")
        return
    }
    println("La función cuadrática es: ${FormatoFuncion(a, b, c)}")

    val rangoX = -5..5
    println("\nTabla de valores:")
    println("x\tf(x)")
    for (x in rangoX) {
        println("$x\t${CalcularFuncion(a, b, c, x.toDouble())}")
    }

    println("\nCálculo de raíces:")
    val discriminante = CalcularDiscriminante(a, b, c)
    val raices = CalcularRaices(a, b, c, discriminante)
    if (raices.isEmpty()) {
        println("La función no tiene raíces reales.")
    } else {
        println("Raíces: ${raices.joinToString(", ") {"%.2f".format(it)}}")
    }
}

fun FormatoFuncion(a: Double, b: Double, c: Double): String {
    return "${a}x² ${if (b >= 0) "+ $b" else "- ${-b}"}x ${if (c >= 0) "+ $c" else "- ${-c}"}"
}

fun CalcularFuncion(a: Double, b: Double, c: Double, x: Double): Double {
    return a * x * x + b * x + c
}

fun CalcularDiscriminante(a: Double, b: Double, c: Double): Double {
    return b * b - 4 * a * c
}

fun CalcularRaices(a: Double, b:Double, c: Double, discriminante: Double): List<Double> {
    return when {
        discriminante > 0 -> {
            val raiz1 = (-b + Math.sqrt(discriminante)) / (2 * a)
            val raiz2 = (-b - Math.sqrt(discriminante)) / (2 * a)
            listOf(raiz1, raiz2)
        }
        discriminante == 0.0 -> {
            val raiz = -b / (2 * a)
            listOf(raiz)
        }
        else -> emptyList()
    }
}

